KQL Operators:

Basic Operators:

	:	-	Equals
	=	-	Equals
	<>	-	Does not equal
	!=	-	Does not equal
	<	-	Less Than
	<=	-	Less than or equal to
	>	-	Greater than
	>=	-	Greater than or equal
	and	-	Add condtitions
	or	-	Add choice
	==	-	Case sensitive
	=~	-	Case insensitive
	!~	-	Case insensitive and not equal to:

Numerical Operators:

	+		-	Addition
	-		-	Subtraction
	*		-	Multiplication
	/		-	Division
	%		-	Modulo
	in		- 	Equals to any of the elements
	Example: 
		"ColumnName" in ("Value1", "Value2", "Value3")
			i.e | where EventID in (4624, 4625)
	!in		- Not equals to any of the elements
	in~		- Equals to any of the elements
	Example:
		"ColumnName" in ("Value1", "Value2", "Value3")
			i.e | where EventID in (4624, 4625)
	!in~	-Not equals to any of the elements
	
Time Operators:
	
	1d	-	1 day	
	1h	-	1 hour
	10m	-	10 Minutes	
	30s	-	30 Seconds
	
	Examples:
	// Last 24hrs
	| Where TimeGenerated > ago(24h)
	
	// Between two dates
	| Where TimeGenerated between(datetime(2022-08-01 00:00:00) .. datetime(2022-08-01 06:00:00))

Source Operators:

	where	-	Filters source data
	extend	-	Computes and adds a new column to the source
	count	-	Counts the number of records in a table
	project	-	Chooses required columns in the output
	take	-	Gets random sample records
	summarize	-	Performs aggregations based on the provided function
	join	-	Merges rows of two tables based on matching fields
	union	-	Returns rows from two or more tables

	Examples:
	// where
	| Where ColumnName = Variable
		i.e | where Computer has "contosohotels.com"
			| where EventID in (4624, 4624)
			
	// extend(Adds a new calculated column.)
	| extend NewColumnName=now()-TimeGenerated
		i.e | extend EventAge=now()-TimeGenerated
	
	// count(Counts the number of columns.)
	| count
	
	// project
	| project ColumnName, ColumnName, ColumnName, ColumnName, ColumnName
		i.e | project TimeGenerated, EventID, Account,Computer, LogonType
		// add = "Newname" to give the column a new name.
		// use Project-Away instead of Project to just remove columns.
	
	// take(takes 5 random rows)
	| take 5
	
	// summarize
	| summarize by ColumnName, ColumnName
		i.e | summarize by Computer, Account
		
	// join(Merge two tables to create a new table)
		//basic 
		| Join (TableName) on ColumnName
		//Complex
		| join
		(TableName) on $left.Computer == $right.Computer
		
		//Join Flavour
			innerunique 
			inner
			leftouter	
			rightouter
			fullouter
			leftsemi
			leftanti
			rightsemi	
			rightanti, rightantisemi
	
	// union(Takes two or more tables and returns the rows of all of them.)
	//Basic(return all values whos name starts with k and the column is named ColumnName)
	union K* | where * has "ColumnName"

Data View Operators:
	//Sort
	| Sort by "Value"
		/i.e | where EventID == 4624 | sort by count_ asc or desc

Data Visualisations Operators:

| Render
	Examples:
		| summarize total_page_views=count() by Name
		| sort by total_page_views | render columnchart

	Data Visualisations Type Operators:
	
		anomalychart
		areachart
		barchart
		columnchart
		ladderchart
		linechart
		piechart
		pivotchart
		scatterchart
		stackedareachart	
		timechart	
		timepivot	
		treemap
		
Search Operators:

// Search everyhing for Green
 search "Green"
// Specific Search
Examples:
	1, | where ProcessName ==@"C:\Windows\System32\svchost.exe"
	2, | where CommandLine contains "guest"
	3, | where Computer startswith "DC"
	4, | where Computer endswith "DC"
	5, | where Computer in ("Computer1", "Computer2")
	6, | where Computer matches regex @"\.contoso.+"

Let Operator:
Example:
	1, 
	let _LetName = dynamic(["Computer1", "Computer2"]);
	| where Computer in (_LetName)
	2,
	let _Last24Hours = ago(24h);
	| where TimeGenerated > _Last24Hours







EXAMPLES:

Show you all active user accounts that have logged in within the last 7 days and have a level of 3 or higher:

SigninLogs
| where TimeGenerated >= ago(7d)
| where level >= 3
| project IPAddress, UserDisplayName, Level

SecurityEvent
| where AccountType == "User" 
// Event ID 4720 = A user account was created. Event ID 4732 = A member was added to a security-enabled local group.
| where EventID == "4720" or EventID == "4732"
| project TargetAccount

Show accounts that haven't logged in for 50 days:

let IdleAccountTimeOut = 50d;  // Number of days an account must not have logged in for to be considered dormant
let timeHorizon = 90d;  // How many days back to check in IdentityInfo
IdentityInfo
| where TimeGenerated >=ago(timeHorizon)
| summarize dcount(AccountObjectId) by AccountObjectId, AccountUPN
| join kind=anti (SigninLogs
| where TimeGenerated >= ago(IdleAccountTimeOut)
| where ResultType==0
//| summarize dcount(UserPrincipalName) by UserPrincipalName
) on $left.AccountObjectId == $right.UserId

Windows failed logins. Find reports of Windows accounts that failed to login:

SecurityEvent
| where EventID == 4625
| summarize count() by TargetAccount
| sort by count_ desc 

A user account was locked out:

SecurityEvent
| where EventID == 4740
| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), LockoutsCount = count() by Activity, Account, TargetSid, TargetDomainName, SourceComputerId, SourceDomainController = Computer
| extend timestamp = StartTime, AccountCustomEntity = Account, HostCustomEntity = TargetDomainName

Users with login failure due to Unknown user name or bad password:

SecurityEvent
| where EventID == 4625 and FailureReason == "%%2313"
| distinct Account

Users with login failure due but required to change password at next logon:

SecurityEvent
| where EventID == 4624 and SubStatus == "0XC0000224"

Retrieves all non-UK based logins:

SigninLogs
| extend city_ = tostring(LocationDetails.city)
| extend state_ = tostring(LocationDetails.state)
| extend countryOrRegion_ = tostring(LocationDetails.countryOrRegion)
| where countryOrRegion_ != "UK"
| distinct TimeGenerated, Identity, city_, state_, countryOrRegion_, IPAddress

Show each separate login per person and their location and IP:

SigninLogs
| extend city_ = tostring(LocationDetails.city)
| extend state_ = tostring(LocationDetails.state)
| extend countryOrRegion_ = tostring(LocationDetails.countryOrRegion)
| distinct TimeGenerated, Identity, city_, state_, countryOrRegion_, IPAddress

DATA---->Condition(filter & Prepare)---->Analyze---->Evidence(Prepare)

SecurityEvent---->"| where EventID == "4624 ----> summarize count() by Account ---->| top 10 by _count"---->
	Data				Filter & Prepare			Analyze								Prepare

----------------------------------------------------------------------------------------------------
**SAMPLE KQL**--------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------

View generated events by age:

SecurityEvent
| where TimeGenerated > ago(1d)
----------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------
View generated events by age and specific eventID:

SecurityEvent
| where TimeGenerated > ago(1h) and EventID == "4624"
----------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------
View generated events by age and specific eventID and AccountType:

SecurityEvent
| where TimeGenerated > ago(1h)
| where EventID == 4624
| where AccountType =~ "user"
----------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------
View generated evetns by EventID:

SecurityEvent | where EventID in (4624, 4625)
----------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------
****Declare Variables:

"% around words is used to denote a variable and for visuals and shoudl not be in actualy query"

let timeOffset = 7d;
let discardEventId = 4688;

SecurityEvent
| where TimeGenerated > ago(%timeOffset%*2) and TimeGenerated < ago(timeOffset)
| where EventID != %discardEventId%
----------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------
****Declare Dynamic Lists or Lists:

let suspiciousAccounts = datatable(account: string) [
    @"\administrator", 
    @"NT AUTHORITY\SYSTEM"
];
SecurityEvent | where Account in (suspiciousAccounts)


let LowActivityAccounts =
    SecurityEvent 
    | summarize cnt = count() by Account 
    | where cnt < 1000;
LowActivityAccounts | where Account contains "SQL"
----------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------
****Extend Operator

SecurityEvent
| where ProcessName != "" and Process != ""
| extend StartDir =  substring(ProcessName,0, string_size(ProcessName)-string_size(Process))
----------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------
****Order by Operator

SecurityEvent
| where ProcessName != "" and Process != ""
| extend StartDir =  substring(ProcessName,0, string_size(ProcessName)-string_size(Process))
| order by StartDir desc, Process asc
----------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------
****Project Operator

project	Select the columns to include, rename or drop, and insert new computed columns.
project-away	Select what columns from the input to exclude from the output.
project-keep	Select what columns from the input to keep in the output.
project-rename	Select the columns to rename in the resulting output.
project-reorder	Set the column order in the resulting output.

"
SecurityEvent
| project Computer, Account


SecurityEvent
| where ProcessName != "" and Process != ""
| extend StartDir =  substring(ProcessName,0, string_size(ProcessName)-string_size(Process))
| order by StartDir desc, Process asc
| project Process, StartDir
"

"
SecurityEvent
| where ProcessName != "" and Process != ""
| extend StartDir =  substring(ProcessName,0, string_size(ProcessName)-string_size(Process))
| order by StartDir desc, Process asc
| project-away ProcessName
"


----------------------------------------------------------------------------------------------------
****Summarize

"
SecurityEvent | summarize by Activity

SecurityEvent
| where EventID == "4688"
| summarize count() by Process, Computer
"

"
SecurityEvent
| where TimeGenerated > ago(1h)
| where EventID == 4624
| summarize cnt=count() by AccountType, Computer
"

"
SecurityEvent
| summarize dcount(IpAddress)
"

"
let timeframe = 30d;
let threshold = 1;
SigninLogs
| where TimeGenerated >= ago(timeframe)
| where ResultDescription has "Invalid password"
| summarize applicationCount = dcount(AppDisplayName) by UserPrincipalName, IPAddress
| where applicationCount >= threshold
"

Create a List:

"
SecurityEvent
| where EventID == "4624"
| summarize make_list(Account) by Computer
"


----------------------------------------------------------------------------------------------------
****Render

	areachart
	barchart
	columnchart
	piechart
	scatterchart
	timechart

Creates a
"
SecurityEvent 

| summarize count() by bin(TimeGenerated, 1d) 
| render timechart
"
----------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------
****Union Operator

// Query 1

returns all rows of SecurityEvent and all rows of SigninLogs

SecurityEvent 
| union SigninLogs  

// Query 2

returns one row and column, which is the count of all rows of SecurityEvent and all rows of SigninLogs

SecurityEvent 
| union SigninLogs  
| summarize count() 
| project count_

// Query 3

returns all rows of SecurityEvent and one row for SigninLogs.

SecurityEvent 
| union (SigninLogs | summarize count()| project count_)

Wildcard:
union Security* 
| summarize count() by Type
----------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------
****Join Operator

kind=leftanti, kind=leftantisemi	Returns all the records from the left side that don't have matches from the right
kind=rightanti, kind=rightantisemi	Returns all the records from the right side that don't have matches from the left.
kind unspecified, kind=innerunique	Only one row from the left side is matched for each value of the on key. The output contains a row for each match of this row with rows from the right
kind=leftsemi	Returns all the records from the left side that have matches from the right.
kind=rightsemi	Returns all the records from the right side that have matches from the left.
kind=inner	Contains a row in the output for every combination of matching rows from left and right.
kind=leftouter (or kind=rightouter or kind=fullouter)	Contains a row for every row on the left and right, even if it has no match. The unmatched output cells contain nulls.

"
SecurityEvent 
| where EventID == "4624" 
| summarize LogOnCount=count() by EventID, Account 
| project LogOnCount, Account 
| join kind = inner (
     SecurityEvent 
     | where EventID == "4634" 
     | summarize LogOffCount=count() by EventID, Account 
     | project LogOffCount, Account 
) on Account
"
----------------------------------------------------------------------------------------------------
