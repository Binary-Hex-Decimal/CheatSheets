Directory:
--------------------
Show directories contents:
ls
List all .PNG files:
ls *.png
Remove all .PNG files:
rm *.png

Create single/multiple directory:
mkdir "Directory1" "Directory2" "Directory3"

Create Directory and sub-directorys:
mkdir -p "parent/child/grandchild"

Create a directory absolute path:
mkdir "Path""Directory1"

Copy a directory:
cp -R "Source1" "Destination1"

Files:
--------------------
Find a file :
find -iname "*.txt"

-Find a file with the extension ".text" and then prompt each file to be removed. removing "-i" will remove the prompt.
find -iname "*.txt" -exec rm -i {} \;

Find files modified within the last 7 days.:
find -mtime -7

Copy file(s) to a destination:
cp "Source1" "Source2" "Source3" "Destination1"/

rename a file:
mv "Filename1" "NewFilename1"

Move files to a location:
mv "Source1" "Source2" "Source3" "/Destination1"

Remove file(s):
rm "file1" "file2"
or
rm "location/file1" "location/file2" 

Add the following to ask before delete or to delete directories.
-i, Ask for confirmation
-r, Delete directories

Permissions:
--------------------
-Add Read/Write and Execute permissions. 
chmod u+rwx "file"

-Remove Read/Write and Execute permissions. 
chmod go-w [file_name]

Processes:
--------------------
List of processes
ps aux

List and search for a process name
ps aux | grep "process name"

Stop a running process by process ID
kill -9 "5161"

System Info:
--------------------
Show hostname
hostname

Show IP
hostname -I

Download:
--------------------
download file from location
wget "IP/hostname/website"

CRON Job
--------------------
List Cron scheduled jobs
crontab -l

Edit Cron scheduled job
crontab -e

Cron Scheduled job sample:
# * * * * * <command to execute>
# | | | | |
# | | | | day of the week (0–6) (Sunday to Saturday; 
# | | | month (1–12)             7 is also Sunday on some systems)
# | | day of the month (1–31)
# | hour (0–23)
# minute (0–59)

Runs a bash script at the Date/Time specififed
i.e 45 23 * * 6 /home/oracle/scripts/export_dump.sh

Create a script

sudo nano /usr/local/bin/Hello_FOSSLinux.sh

Copy the following to the file

"
#!/bin/bash
echo "Hello, FOSSLinux!"
"

input sudo chmod +x /usr/local/bin/Hello_FOSSLinux.sh to make the script executable

sudo nano /etc/systemd/system/FOSSLinux.service to edit file

"
[Unit]
Description=FOSSLinux Service

[Service]
ExecStart=/usr/local/bin/Hello_FOSSLinux.sh

[Install]
WantedBy=multi-user.target
"

[Unit]
Description=FOSSLinux Service

[Service]
ExecStart=/usr/local/bin/Hello_FOSSLinux.sh

[Install]
WantedBy=multi-user.target to reload

systemctl start FOSSLinux

systemctl enable FOSSLinux

Filesystem info:
df -h
File Info:
df -h "file"

Mount:
Syntax
mount -t [type] [device] [dir]
e.g.
Mount Filesystem:
sudo mount /dev/sdb1 /mnt/media
Mount USB:

Mount CD-ROM:
mount -t iso9660 -o ro /dev/cdrom /mnt

Mount ISO:
sudo mount /image.iso /media/iso-file -o loop

mkdir /media/usb-drive:
Step 1 - fdisk -l
Step 2 - sudo mount /dev/sdb1 /media/usb-drive

Unmount:
umount [dir/Device/]

Manually Mount Share:
Step 1 - Create a mount location
i.e sudo mkdir "/var/backups"
Step 2 - Moun the share
sudo mount -t nfs 10.10.0.10:/backups "/var/backups"

Ato Mount share:
Step 1 - Create a mount location
i.e sudo mkdir "/var/backups"
Step 2 - Open file to edit
sudo nano /etc/fstab
Step 3 - Add the lines:
mount /var/backups
mount 10.10.0.10:/backups

On reboot the share will be remounted

Remove Mount:
umount 10.10.0.10:/backups 
umount /var/backups
or
remove lines from sudo nano /etc/fstab
